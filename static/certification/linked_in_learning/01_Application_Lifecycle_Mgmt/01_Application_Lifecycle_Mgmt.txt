02_01 - Application Lifecycle Management

kubectl create deploy webapp1 --image=nginx:1.16-alpine-perl --dry-run -o=yaml > webapp1.yml

nano webapp1.yml

kubectl create -f webapp1.yml

kubectl get deploy -o=wide

cp webapp1.yml webapp2.yml

nano webapp2.yml

kubectl apply -f webapp2.yml

kubectl rollout status deploy webapp1
kubectl rollout history deploy webapp1
kubectl rollout undo deploy webapp1

kubectl get deploy -o=wide

---
kubectl scale
kubectl edit (replicas object)
--replicas
---
https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
Copy YAML and same to yml file then
kubectl create -f myjob.yml
kubectl get jobs -w

Notice restartPolicy=Never or OnFailure

Difference with a cronjob is that it's scheduled

---
Use the kubectl create configmap command to create configmaps from directories, files, or literal values:
https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#create-configmaps-from-literal-values

kubectl create configmap <map-name> <data-source>
kubectl create configmap game-config --from-file=configure-pod-container/configmap/
kubectl create configmap game-config-2 --from-file=configure-pod-container/configmap/game.properties

kubectl create configmap special-config --from-literal=special.how=very --from-literal=special.type=charm

You can use kubectl describe or kubectl get to retrieve information about a ConfigMap.

kubectl get configmap special-config
kubectl describe configmap special-config
---
https://kubernetes.io/docs/concepts/configuration/secret/
--

Understand the primitives necessary to create a self-healing application.
Use deployments (replicasets)

